import streamlit as st
from info_search_vector import info #–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–µ–∫—Ç–æ—Ä—É
from info_search_vector import search_glic_ro
from vector_selection import selection #–§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–µ–∫—Ç–æ—Ä–∞
from auto_valve_scheme import valve, scheme  # –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
from blank import blank_auto #–§–æ—Ä–º–∏—Ä—É–µ–º –í–µ–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
from order_form import fulfil_temp # –ü–æ —Ñ–∞–∫—Ç—É, —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∞–º –±–ª–∞–Ω–∫
import io
from zipfile import ZipFile 
from vector_verosa import many_bl, table_costs
import pandas as pd


st.set_page_config(layout="wide") 
st.session_state['developer'] = st.text_input('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞') #–í–≤–æ–¥–∏–º –∏–º—è –∏–Ω–∂–µ–Ω–µ—Ä–∞
main_tab = st.tabs(['–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º', '–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º', '–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º']) #–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º
st.session_state['blank_name'] = []


def automate_foo(ind,vector_podbor = bool):
    """ –û–±—â–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏ –ø–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞\n
    –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–≤–∞ –æ—Ç–ª–∏—á–∏—è: –≤–µ–∫—Ç–æ—Ä –∏ —Ä–µ–∑–µ—Ä–≤ –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ"""
    i = 0 #–°—á—ë—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–∞)
    j = 0
    f = st.file_uploader("–ü–µ—Ä–µ—Ç—è–Ω–∏—Ç–µ –±–ª–∞–Ω–∫–∏ —Å—é–¥–∞", accept_multiple_files=True,key=ind) #–í–∏–¥–∂–µ—Ç –≤–≤–æ–¥–∞ –±–ª–∞–Ω–∫–æ–≤
    #file_zip = zipfile.ZipFile ('C:\\Users\\kushhov\\Desktop\\vector-main\\Archive.zip','w')
    Archive = io.BytesIO()
    name_archive = ''
    name_file = ''
    vals = {} #–°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ many_bl
    all_df_cost = {}
    all_df_cost = pd.DataFrame(all_df_cost)
    all_df_verosa = {}
    all_df_verosa = pd.DataFrame(all_df_verosa)
    for file in f: #–ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É —Ñ–∞–π–ª—É
        #st.session_state['blank_name'].append(file.name) –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –±–ª–∞–Ω–∫–æ–≤
        #st.session_state['blank_name']
        j +=1
        #st.write(info(file).all_data) #–í—ã–≤–æ–¥–∏—Ç –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        name_file = file.name
        current_info = info(file).all_data #–°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ (all_data - —Å–ø–∏—Å–æ–∫)
        name_archive = ''
        BZ = current_info[0][7][1]
        key_cost = []
        cvector_list = []
        rezerve_list = []
        for cinfo in current_info: #–ü—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É (—Å–ø–∏—Å–æ–∫ –Ω–∞–±–æ—Ä –∫–æ—Ä—Ç–µ–∂–µ–π - –ø–∞—Ä) –ó–¥–µ—Å—å –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º
            ind +=1 
            cvector,vector_scheme, vector_valve, type_size = selection(scheme(cinfo[0][1]), valve(cinfo[0][1], cinfo[2][1]), cinfo[2][1], cinfo[9][1])
            cblank = (blank_auto(selection(scheme(cinfo[0][1]), valve(cinfo[0][1], cinfo[2][1]), cinfo[2][1], cinfo[9][1]), cinfo, st.session_state['developer']))
            cvector,vector_scheme, vector_valve, type_size = selection(scheme(cinfo[0][1], cblank["intermediate coolant"]), valve(cinfo[0][1], cinfo[2][1], cblank["intermediate coolant"]), cinfo[2][1], cinfo[9][1])
            cblank = (blank_auto(cvector, cinfo, st.session_state['developer'])) #–§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ—Ç —Å–∞–º—ã–π –í–µ–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç—Å—è

            if vector_podbor:
                col = st.columns(2) # –î–µ–ª–∏–º –Ω–∞ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
                vector_scheme, vector_valve, vector_side,rezerve = vector_form_foo(ind,col,vector_scheme)
                cvector,vector_scheme, vector_valve, type_size = selection(vector_scheme, vector_valve, cblank["consumption"], vector_side)
                type_scheme =[vector_scheme,vector_valve,type_size]
                cblank["vector"] = cvector
            else:
                #type_scheme = scheme(cinfo[0][1], cblank["intermediate coolant"]) + '-' + valve(cinfo[0][1], cinfo[2][1], cblank["intermediate coolant"])
                type_scheme =[vector_scheme,vector_valve,type_size]


            st.write(cblank) # –í –∫–æ–Ω–µ—á–Ω–æ–º –∏—Ç–æ–≥–µ –≤—ã–≤–æ–¥–∏–º –±–ª–∞–Ω–∫ –≤ –≤–∏–¥–µ –≤–µ–∫—Ç–æ—Ä–∞


            # –ë–ª–æ–∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–∞–Ω–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤


            bio = io.BytesIO()
            document = fulfil_temp(cblank,type_scheme)
            key_cost.append(f'{type_scheme[0]}-{type_scheme[1].upper()}-{type_scheme[2]}')
            document.save(bio)
            cvector_list.append(cvector)
            if vector_podbor:
                rezerve_list.append(rezerve)
            name = f"{cblank['order form']}-{cblank['system']}-{cvector}.docx"
            with ZipFile(Archive, mode='a') as archive:
                archive.writestr(name, bio.getvalue())

            name_archive = cblank['orderer']+'.zip'
            # –æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ cinfo

            vals[f'scheme{i}'] = scheme(cinfo[0][1], cblank["intermediate coolant"])
            vals[f'valve{i}'] = valve(cinfo[0][1], cinfo[2][1], cblank["intermediate coolant"])
            vals[f'side{i}'] = cinfo[9][1]
            vals[f'rez{i}'] = False
            i+=1



        df_verosa, df_cost = many_bl(file,vals,name_file,BZ,key_cost,cvector_list,vector_podbor,rezerve_list) 
        all_df_cost = pd.concat([all_df_cost,df_cost])
        all_df_verosa = pd.concat([all_df_verosa,df_verosa])

        if j == len(f):
            #–ë–õ–û–ö –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –¢–ê–ë–õ–ò–¶ (–≤–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª)
            output = io.BytesIO()
            writer = pd.ExcelWriter(output, engine='xlsxwriter')
            all_df_verosa.to_excel(output, index=False)
            name = '–í–ï–ö–¢–û–† –í–ï–†–û–°–ê.xlsx'
            with ZipFile(Archive, mode='a') as archive:
                archive.writestr(name,output.getvalue())

            output = io.BytesIO()
            writer = pd.ExcelWriter(output, engine='xlsxwriter')
            all_df_cost.to_excel(output, index=False)
            name = '–í–ï–ö–¢–û–† –¶–ï–ù–´.xlsx' 
            with ZipFile(Archive, mode='a') as archive:
                archive.writestr(name,output.getvalue())

            st.download_button('üíæ–ó–∞–≥—Ä—É–∑–∏—Ç—å –ê—Ä—Ö–∏–≤: ', data=Archive.getvalue(), file_name=name_archive,key=ind+6) # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–≤–æ–π –∞—Ä—Ö–∏–≤ (–æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–Ω–µ—à–Ω–µ–º—É —Ü–∏–∫–ª—É)

def vector_form_foo(ind,col,vector_scheme):
    col[0].write(f'–£–∑–µ–ª—Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–π –í–ï–ö–¢–û–†:')
    col[1].write(' ')
    col[1].write(' ')
    col[1].write(' ')
   

    origin = 0
    match vector_scheme:
        case "1":
            origin = 0
        case "2":
            origin = 1
        case "3": 
            origin = 2
        case "4":
            origin = 3
        case "4–ú":
            origin = 4
        case "5":
            origin = 5
        case "5–ú":
            origin = 6
        case "6":
            origin = 7
        case "6–ú":
            origin = 8


    vector_scheme = col[0].selectbox( '–°—Ö–µ–º–∞', ('1', '2', '3','4','4–ú','5','5–ú','6','6–ú'),key=ind+111,index=origin)
    if vector_scheme in ('1','3','4–ú'):
        vector_valve = '–°'
        col[0].write('–ö–ª–∞–ø–∞–Ω: –°')
    elif vector_scheme in ('6','6–ú'):
        vector_valve = '–®'
        col[0].write('–ö–ª–∞–ø–∞–Ω: –®')
    else:
        vector_valve = col[0].selectbox( '–ö–ª–∞–ø–∞–Ω', ('–°', '–®'),key=ind+222)

    rezerve = col[1].checkbox(label ='–†–µ–∑–µ—Ä–≤',key=ind+444)
    if rezerve:
        rezerve = 1
    else:
        rezerve = 0
    vector_side = col[1].selectbox( '–°—Ç–æ—Ä–æ–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', ('–õ', '–ü'),key=ind+333,index=1)
    return vector_scheme, vector_valve, vector_side, rezerve

with main_tab[0]: # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ 
    automate_foo(0,False)

with  main_tab[2]: # –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    col = st.columns(2) # –î–µ–ª–∏–º –Ω–∞ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞

    cblank = {} #–°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –±–ª–∞–Ω–∫
    Archive = io.BytesIO()
    #–û—Å–Ω–æ–≤–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    col[0].write('–û—Å–Ω–æ–≤–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    cblank["orderer"] = col[0].text_input('–ó–∞–∫–∞–∑—á–∏–∫:')
    cblank["object"] = col[0].text_input('–û–±—ä–µ–∫—Ç:')
    cblank["manager"] = col[0].text_input('–ú–µ–Ω–µ–¥–∂–µ—Ä:')
    cblank["order form"] = col[0].text_input('–ù–æ–º–µ—Ä –ë–ó:')
    cblank["developer"] = col[0].text_input('–í—ã–ø–æ–ª–Ω–∏–ª:')

    #–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã 
    col[1].write('–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã')
    cblank["temperature"] = col[1].number_input('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –≤—Ö–æ–¥–µ:')
    cblank["consumption"] = col[1].number_input('–†–∞—Å—Ö–æ–¥ —Ç–µ–ø–ª–æ–Ω–æ—Å–∏—Ç–µ–ª—è, —Ç/—á')
    glycol_hidden = False
    cblank["glycol type"] = col[1].radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ–ø–ª–æ–Ω–æ—Å–∏—Ç–µ–ª—è",('–≠—Ç–∏–ª–µ–Ω–≥–ª–∏–∫–æ–ª—å', '–ü—Ä–æ–ø–∏–ª–µ–Ω–≥–ª–∏–∫–æ–ª—å', '–í–æ–¥–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –°–ü 124.13330.2012'))
    if  cblank["glycol type"] == '–í–æ–¥–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –°–ü 124.13330.2012':
        glycol_hidden = True
        cblank["glycol"] = 0
    cblank["glycol"] = col[1].number_input(label ='C–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥–ª–∏–∫–æ–ª—è %',disabled =glycol_hidden)


    #–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—Ä–∞–≤–æ—á–Ω–æ–π —Ü–µ–Ω—ã

    realG = cblank["consumption"] /search_glic_ro(cblank["temperature"], cblank["glycol"]/100)

    #–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞

    
    vector_scheme, vector_valve, vector_side,rezerve = vector_form_foo(10,col,1)
    cvector,vector_scheme, vector_valve, type_size = selection(vector_scheme, vector_valve, cblank["consumption"], vector_side)
    st.write(f'{cvector}')



    cblank["vector"] = cvector
    if rezerve:
        cblank["reserve"] = 1
    else:
        cblank["reserve"] = 0



    type_scheme =[vector_scheme,vector_valve,type_size]
    document = fulfil_temp(cblank,type_scheme)
    key_cost = [f'{vector_scheme}-{vector_valve}-{type_size}']
    bio = io.BytesIO()
    document.save(bio)
    name = f"{cvector}.docx"
    with ZipFile(Archive, mode='a') as archive:
        archive.writestr(name, bio.getvalue())



    #–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    allsis={"–ë–ª–∞–Ω–∫": [cblank["orderer"]],
                "–†–∞—Å—Ö–æ–¥ –∂–∏–¥–∫–æ—Å—Ç–∏": [cblank["consumption"]],
                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –≤—Ö–æ–¥–µ": [cblank["temperature"]],
                "–î–æ–ª—è –≥–ª–∏–∫–æ–ª—è": [cblank["glycol"]],
                "–†–∞—Å—Ö–æ–¥ –ø–æ–ø—Ä–∞–≤–æ—á–Ω—ã–π": realG,
                "–í–µ–∫—Ç–æ—Ä": [cblank["vector"]],
                "–ù–æ–º–µ—Ä –ë–ó": [cblank["order form"]],
                "–†–µ–∑–µ—Ä–≤": [cblank["reserve"]]}
        
    df_verosa = pd.DataFrame(allsis)  
    output = io.BytesIO()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    df_verosa.to_excel(output, index=False)
    name = '–í–ï–ö–¢–û–† –í–ï–†–û–°–ê.xlsx'
    with ZipFile(Archive, mode='a') as archive:
        archive.writestr(name,output.getvalue())
    BZ = [cblank["order form"]]
    rezerve = [str(cblank["reserve"])]
    glycol = [cblank["glycol"]]
    blank = [cblank["orderer"]]
    block = ['-']
    df_cost = table_costs(BZ, key_cost, rezerve,glycol,blank,block)
    output = io.BytesIO()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    df_cost.to_excel(output, index=False)
    name = '–í–ï–ö–¢–û–† –¶–ï–ù–´.xlsx' 
    with ZipFile(Archive, mode='a') as archive:
        archive.writestr(name,output.getvalue())
    name_archive = cblank['order form']+'.zip'
    st.download_button('üíæ–ó–∞–≥—Ä—É–∑–∏—Ç—å –ê—Ä—Ö–∏–≤: ', data=Archive.getvalue(), file_name=name_archive) # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–≤–æ–π –∞—Ä—Ö–∏–≤ (–æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–Ω–µ—à–Ω–µ–º—É —Ü–∏–∫–ª—É)

with  main_tab[1]: #–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: –í–ï–ö–¢–û–ö-—Å—Ö–µ–º–∞-–∫–ª–∞–ø–∞–Ω-—Å—Ç–æ—Ä–æ–Ω–∞ –∏ —Ä–µ–∑–µ—Ä–≤
    automate_foo(400,True)
