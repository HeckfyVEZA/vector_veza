from vector_verosa import search_glic_ro,TIH,TIS
from docx import Document
import pandas as pd
from re import findall as f_all
import streamlit as st
import io


def many_bl_kanal(blanks,ind):# –ö—É—Å–æ–∫ –∫–æ–¥–∞, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –∫–∞–Ω–∞–ª–∫–æ–π   –ó–î–ï–°–¨ –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú –ù–ê–õ–ò–ß–ò–ï_–ì–õ–ò–ö–û–õ–Ø
    #blanks = primary_ui("–ö–∞–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")["FolMon"].split(";")
    all_infos = []
    # –î–∞–Ω–Ω—ã–µ –∏—Ö all_infos
    #[['C:/Users/Test/Desktop/vector_veza-master/VECTOR_origin/canal/1-–ü1.docx', '-', '–ö–∞–Ω–∞–ª-–ö–í–ù-80-50-3', 2607.9, 90.0, 0, 'C:/Users/Test/Desktop/vector_veza-master/VECTOR_origin/canal/1-–ü1.docx', 2701.535]]
    
    
    #–ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞-—Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –æ–±—â–µ–≥–æ —Ñ—Ä–µ–π–º–∞
    Data_table = {'–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–∞–Ω–∫–∞':[],'–ë–ª–æ–∫':[],'–°—Ö–µ–º–∞':[],'–ö–ª–∞–ø–∞–Ω':[],'–°—Ç–æ—Ä–æ–Ω–∞':[],'–¢–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫':[],'–†–∞—Å—Ö–æ–¥ –∂–∏–¥–∫–æ—Å—Ç–∏':[],'–î–æ–ª—è –≥–ª–∏–∫–æ–ª—è':[],'–í–∫–ª—é—á—ë–Ω':[],'–†–µ–∑–µ—Ä–≤':[],} #–ü—É—Å—Ç–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã

    list_name = []
    nn = 0
    for blank in blanks:
        info_blank = file_read_kanal(blank)
        blank_name = blank.name
        for mini_info_blank in info_blank:
            mini_info_blank.append(round(mini_info_blank[3]/search_glic_ro(mini_info_blank[4], mini_info_blank[5]), 3))
            nn +=1
            list_name.append(blank_name)
            #–ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            Data_table['–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–∞–Ω–∫–∞'].append(blank_name)
            Data_table['–ë–ª–æ–∫'].append(mini_info_blank[1])
            Data_table['–°—Ö–µ–º–∞'].append('')
            Data_table['–ö–ª–∞–ø–∞–Ω'].append('')
            Data_table['–°—Ç–æ—Ä–æ–Ω–∞'].append('') 
            Data_table['–¢–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫'].append(mini_info_blank[2])
            Data_table['–†–∞—Å—Ö–æ–¥ –∂–∏–¥–∫–æ—Å—Ç–∏'].append(mini_info_blank[3])
            Data_table['–î–æ–ª—è –≥–ª–∏–∫–æ–ª—è'].append(mini_info_blank[5])
            Data_table['–í–∫–ª—é—á—ë–Ω'].append(1) #–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö 1
            Data_table['–†–µ–∑–µ—Ä–≤'].append(0) #–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö  0
            all_infos.append(mini_info_blank)

    if nn:
        #–û—Å—É—â–µ—Å—Ç–≤—è–ª–µ–º –º–µ–Ω—é-–≤—ã–±–æ—Ä
        Data_frame = pd.DataFrame(Data_table)
        #–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        col = st.columns(5) # –î–µ–ª–∏–º –Ω–∞ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        col[0].write('–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä')
        all_col_vector_scheme = col[1].selectbox( '–°—Ö–µ–º–∞', ('–ë–µ–∑ –≤—ã–±–æ—Ä–∞','1', '2', '3','4','4–ú','5','5–ú','6','6–ú'),key=ind+777)
        all_col_vector_valve = col[2].selectbox( '–ö–ª–∞–ø–∞–Ω', ('–ë–µ–∑ –≤—ã–±–æ—Ä–∞','–°', '–®'),key=ind+767)
        all_col_vector_side = col[3].selectbox( '–°—Ç–æ—Ä–æ–Ω–∞', ('–ë–µ–∑ –≤—ã–±–æ—Ä–∞','–ü', '–õ'),key=ind+768)
        all_col_rezerve = col[4].selectbox( '–†–µ–∑–µ—Ä–≤', ('–ë–µ–∑ –≤—ã–±–æ—Ä–∞','0', '1'),key=ind+789)
        if all_col_vector_scheme != '–ë–µ–∑ –≤—ã–±–æ—Ä–∞':
            Data_frame['–°—Ö–µ–º–∞'] = all_col_vector_scheme
        if all_col_vector_valve != '–ë–µ–∑ –≤—ã–±–æ—Ä–∞':    
            Data_frame['–ö–ª–∞–ø–∞–Ω'] = all_col_vector_valve
        if all_col_vector_side != '–ë–µ–∑ –≤—ã–±–æ—Ä–∞':    
            Data_frame['–°—Ç–æ—Ä–æ–Ω–∞'] = all_col_vector_side      
        if all_col_rezerve != '–ë–µ–∑ –≤—ã–±–æ—Ä–∞':    
            Data_frame['–†–µ–∑–µ—Ä–≤'] =  all_col_rezerve

        edit_frame = st.data_editor(Data_frame, use_container_width=True, hide_index=True, 
            column_config={
            "–†–µ–∑–µ—Ä–≤": st.column_config.SelectboxColumn(
                width="small",
                options=['0', '1'],
                required=True,
                    ),
            "–°—Ö–µ–º–∞": st.column_config.SelectboxColumn(
                width="small",
                options=['1', '2', '3','4','4–ú','5','5–ú','6','6–ú'],
                required=True,
                    ),
            "–ö–ª–∞–ø–∞–Ω": st.column_config.SelectboxColumn(
                width="small",
                options=['–°', '–®'],
                required=True,
                    ),
            "–°—Ç–æ—Ä–æ–Ω–∞": st.column_config.SelectboxColumn(
                width="small",
                options=['–ü', '–õ'],
                required=True,
                    ),
                },
                disabled=["–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–∞–Ω–∫–∞","–¢–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫","–†–∞—Å—Ö–æ–¥ –∂–∏–¥–∫–æ—Å—Ç–∏","–î–æ–ª—è –≥–ª–∏–∫–æ–ª—è"],
                )

        if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", type="primary",key=ind+999):
            vals = {} #–°–ª–æ–≤–∞—Ä—å
            for i in range(nn):
                vals[f'scheme{i}'] = edit_frame['–°—Ö–µ–º–∞'].values[i]
                vals[f'cb{i}'] = edit_frame['–í–∫–ª—é—á—ë–Ω'].values[i]
                vals[f'rez{i}'] = edit_frame['–†–µ–∑–µ—Ä–≤'].values[i]
                vals[f'side{i}'] = edit_frame['–°—Ç–æ—Ä–æ–Ω–∞'].values[i]
                vals[f'valve{i}'] = edit_frame['–ö–ª–∞–ø–∞–Ω'].values[i]

                
            for i in range(len(all_infos)):
                if vals[f'cb{i}']:
                    all_infos[i].append(f"–í–ï–ö–¢–û–†-{vals[f'scheme{i}']}-{vals[f'valve{i}']}-{scheme_recognition(vals[f'valve{i}'], float(all_infos[i][7]))}-{vals[f'side{i}']}-–°+")
                    all_infos[i].append(int(vals[f'rez{i}']) if not (str(vals[f'scheme{i}']) in ['1', '3', '6', '6–ú'] or vals[f'valve{i}'] == "–®") else 0)
            names_of, blocks, TOs, GnGs, Ts, Gs, GGs, Vs, short_blank, BZs, rezervs = [], [], [], [], [], [], [], [], [], [], []
            Glycol_found = []
            for item in all_infos:
                if len(item)>7:
                    names_of.append(item[0])
                    blocks.append(item[1])
                    TOs.append(item[2])
                    GnGs.append(item[3])
                    Ts.append(item[4])
                    Gs.append(item[5])
                    Glycol_found.append(item[5])
                    GGs.append(item[7])
                    Vs.append(item[-2])
                    #short_blank.append(item[0].split("/")[-1].split(".doc")[0])
                    #BZs.append(item[0].split("/")[-1].split(".doc")[0])
                    rezervs.append(item[-1])
            allsis = {"–ë–ª–∞–Ω–∫": list_name,
                    "–ë–ª–æ–∫": blocks,
                    "–¢–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫": TOs, 
                    "–†–∞—Å—Ö–æ–¥ –∂–∏–¥–∫–æ—Å—Ç–∏": GnGs, 
                    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –≤—Ö–æ–¥–µ": Ts, 
                    "–î–æ–ª—è –≥–ª–∏–∫–æ–ª—è": Gs, 
                    "–†–∞—Å—Ö–æ–¥ –ø–æ–ø—Ä–∞–≤–æ—á–Ω—ã–π": GGs, 
                    "–í–µ–∫—Ç–æ—Ä": Vs, 
                    "–ù–æ–º–µ—Ä –ë–ó": '-', 
                    "–†–µ–∑–µ—Ä–≤": rezervs}

            df = pd.DataFrame(allsis)
            output = io.BytesIO()
            
            #df.to_excel(f"–í–ï–ö–¢–û–† –∫–∞–Ω–∞–ª.xlsx", index=False)
            df.to_excel(output, index=False)
            name = '–í–ï–ö–¢–û–† –∫–∞–Ω–∞–ª.xlsx'
            st.download_button('üíæ–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É: ', data=output.getvalue(), file_name=name,key=ind+98765)




def file_read_kanal(way:str): # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–ª–∞–Ω–∫–µ –∫–∞–Ω–∞–ª–∫–∏
    key_ = False
    all_vecs = []
    doc = Document(way)
    for tab in doc.tables:
        for row in tab.rows:
            for cell in row.cells:
                try:
                    TO = f_all(r"(–ö–∞–Ω–∞–ª-–ö–í[–ù–û][–ê-–Ø–∞-—è0-9\-]+)", cell.text)[0]
                    G = float(f_all(r"[GV]–∂=([0-9.,]+)", cell.text)[0].replace(",","."))
                    tzhn = float(f_all(r"t–∂–Ω=([0-9.,]+)", cell.text)[0].replace(",","."))
                    block_num = "-"
                    g_s = f_all(r"–ª–µ–Ω–≥–ª–∏–∫–æ–ª—å [-]*? ?([0-9.,]+)", cell.text)
                    glycol = float((g_s[0])) / 100 if len(g_s) != 0 else 0
                    all_vecs.append([way, block_num, TO, G, tzhn, glycol, way])
                    break
                except:
                    if "–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ (–¥–ë) –∏ —Å—É–º–º–∞—Ä–Ω—ã–µ (–¥–ë–ê) —É—Ä–æ–≤–Ω–∏ –∑–≤—É–∫–æ–≤–æ–π –º–æ—â–Ω–æ—Å—Ç–∏" in cell.text:
                        key_ = True
                        break
                    else:
                        pass
            if key_:
                break
        if key_:
            break
    return all_vecs

def scheme_recognition(valve, G): # –§—É–Ω–∫—Ü–∏—è, –≤—ã–±–∏—Ä–∞—é—â–∞—è —Ç–æ, –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –í–ï–ö–¢–û–†–∞
        return TIH(G) if valve.lower() in ["—à", "—à–∞—Ä–æ–≤–æ–π"] else TIS(G)



